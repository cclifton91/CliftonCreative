---
//imports
import { Image } from "astro:assets";
import logo from "@/assets/letterLogo.png";
import { Icon } from "astro-icon/components";

//props
const navData = [
	{
		title: "Works",
		href: "/projects",
	},
	{
		title: "Home",
		href: "/",
		icon: "logomark",
	},
	{
		title: "Contact",
		href: "/contact",
	},
];
---

<header class="header absolute js-header bg-transparent">
	<div class="header__container w-[calc(100%_-_2.5rem)] lg:w-[calc(100%_-_4rem)] mx-auto max-w-7xl">
		<div class="header__logo">
			<a href="/">
				<Icon name="letterLogoLight" class="text-4xl" />
			</a>
		</div>

		<button
			class="bg-primary text-light border border-dark text-[1em] px-4 py-2 rounded-md relative inline-flex justify-center items-center whitespace-nowrap cursor-pointer no-underline leading-tight transition-all duration-200 hover:shadow focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-gray-700 header__trigger lg:hidden js-header__trigger"
			aria-label="Toggle menu"
			aria-expanded="false"
			aria-controls="header-nav">
			<i class="not-italic header__trigger-icon" aria-hidden="true"></i>
			<span>Menu</span>
		</button>

		<nav class="header__nav js-header__nav" id="header-nav" role="navigation" aria-label="Main">
			<div class="header__nav-inner">
				<div class="header__label">Main menu</div>
				<ul class="header__list">
					{
						navData.map((item) => (
							<li class="header__item">
								<a href={item.href} class="header__link">
									{item.title}
								</a>
							</li>
						))
					}
				</ul>
			</div>
		</nav>
	</div>
</header>

<style>
	:root {
		--header-height: 50px;
	}
	@media (min-width: 64rem) {
		:root {
			--header-height: 70px;
		}
	}

	.header {
		height: var(--header-height);
		width: 100%;
		@apply z-[3];
	}

	.header__container {
		height: 100%;
		display: flex;
		justify-content: space-between;
		align-items: center;
	}

	.header__logo {
		position: relative;
		z-index: 2;
		flex-shrink: 0;
	}
	.header__logo a,
	.header__logo svg,
	.header__logo img {
		display: block;
	}

	.header__nav {
		position: absolute;
		z-index: 1;
		top: 0;
		left: 0;
		width: 100%;
		max-height: 100vh;
		overflow: auto;
		overscroll-behavior: contain;
		-webkit-overflow-scrolling: touch;
		display: none;
	}
	.header__nav::before {
		content: "";
		display: block;
		position: -webkit-sticky;
		position: sticky;
		top: 0;
		height: var(--header-height);
		background: inherit;
	}

	.header__nav--is-visible {
		display: block;
		@apply border-b border-b-dark;
	}

	.header__nav-inner {
		@apply p-5 lg:p-8;
	}

	.header__label {
		@apply text-sm lg:text-base;
		@apply text-dark;
		@apply mt-3 lg:mt-5;
	}

	.header__item {
		@apply mt-3 lg:mt-5;
	}

	.header__link {
		@apply text-xl lg:text-3xl;
		@apply text-light;
		text-decoration: none;
		@apply font-heading;
	}
	.header__link:hover,
	.header__link[aria-current] {
		@apply text-primary;
	}

	.header__nav-btn {
		@apply text-xl lg:text-3xl lg:leading-tight;
		width: 100%;
	}

	.header__trigger {
		position: relative;
		z-index: 2;
	}

	.header__trigger-icon {
		position: relative;
		display: block;
		height: 2px;
		width: 1em;
		background-color: currentColor;
		@apply mr-1.5 lg:mr-2;
		transition: 0.2s;
	}
	.header__trigger-icon::before,
	.header__trigger-icon::after {
		content: "";
		position: absolute;
		left: 0;
		top: 0;
		width: inherit;
		height: inherit;
		background-color: currentColor;
		transition: 0.2s;
	}
	.header__trigger-icon::before {
		-webkit-transform: translateY(-5px);
		transform: translateY(-5px);
	}
	.header__trigger-icon::after {
		-webkit-transform: translateY(5px);
		transform: translateY(5px);
	}

	.header__trigger[aria-expanded="true"] .header__trigger-icon {
		background-color: transparent;
	}
	.header__trigger[aria-expanded="true"] .header__trigger-icon::before {
		transform: rotate(45deg);
	}
	.header__trigger[aria-expanded="true"] .header__trigger-icon::after {
		transform: rotate(-45deg);
	}

	@media (min-width: 64rem) {
		.header__nav {
			position: static;
			background-color: transparent;
			width: auto;
			max-height: none;
			box-shadow: none;
			overflow: visible;

			overscroll-behavior: auto;
			display: block;
		}
		.header__nav::before {
			display: none;
		}

		.header__nav-inner {
			padding: 0;
		}

		.header__label {
			position: absolute;
			clip: rect(1px, 1px, 1px, 1px);
			clip-path: inset(50%);
		}

		.header__list {
			display: flex;
			align-items: center;
		}

		.header__item {
			display: inline-block;
			margin-bottom: 0;
			@apply ml-5 lg:ml-8;
		}

		.header__link,
		.header__nav-btn {
			font-size: 1.125rem;
		}

		.header__item--divider {
			height: 1em;
			width: 1px;
		}

		.header__trigger {
			display: none;
		}
	}
</style>

<script>
	if (!Util) function Util() {}

	Util.hasClass = function (el: Element, className: string): boolean {
		return el.classList.contains(className);
	};

	Util.addClass = function (el: Element, className: string): void {
		const classList = className.split(" ");
		el.classList.add(classList[0]);
		if (classList.length > 1) Util.addClass(el, classList.slice(1).join(" "));
	};

	Util.removeClass = function (el: Element, className: string): void {
		const classList = className.split(" ");
		el.classList.remove(classList[0]);
		if (classList.length > 1) Util.removeClass(el, classList.slice(1).join(" "));
	};

	Util.toggleClass = function (el: Element, className: string, bool: boolean): void {
		if (bool) Util.addClass(el, className);
		else Util.removeClass(el, className);
	};

	// File#: _1_main-header
	// Usage: codyhouse.co/license
	(function () {
		const mainHeader = document.getElementsByClassName("js-header");
		if (mainHeader.length > 0) {
			const trigger = mainHeader[0].getElementsByClassName("js-header__trigger")[0] as HTMLElement,
				nav = mainHeader[0].getElementsByClassName("js-header__nav")[0] as HTMLElement;

			// we'll use these to store the node that needs to receive focus when the mobile menu is closed
			let focusMenu: HTMLElement | false = false;

			//detect click on nav trigger
			trigger.addEventListener("click", function (event: Event) {
				event.preventDefault();
				toggleNavigation(!Util.hasClass(nav, "header__nav--is-visible"));
			});

			// listen for key events
			window.addEventListener("keyup", function (event: KeyboardEvent) {
				// listen for esc key
				if (event.key && event.key.toLowerCase() === "escape") {
					// close navigation on mobile if open
					if (trigger.getAttribute("aria-expanded") === "true" && isVisible(trigger)) {
						focusMenu = trigger; // move focus to menu trigger when menu is close
						trigger.click();
					}
				}
				// listen for tab key
				if (event.key && event.key.toLowerCase() === "tab") {
					// close navigation on mobile if open when nav loses focus
					if (
						trigger.getAttribute("aria-expanded") === "true" &&
						isVisible(trigger) &&
						!document.activeElement.closest(".js-header")
					)
						trigger.click();
				}
			});

			// listen for resize
			let resizingId: ReturnType<typeof setTimeout> | undefined = undefined;
			window.addEventListener("resize", function () {
				clearTimeout(resizingId);
				resizingId = setTimeout(doneResizing, 500);
			});

			function doneResizing() {
				if (!isVisible(trigger) && Util.hasClass(mainHeader[0], "header--expanded")) toggleNavigation(false);
			}

			function isVisible(element: HTMLElement): boolean {
				return !!(element.offsetWidth || element.offsetHeight || element.getClientRects().length);
			}

			function toggleNavigation(bool: boolean): void {
				// toggle navigation visibility on small device
				Util.toggleClass(nav, "header__nav--is-visible", bool);
				Util.toggleClass(mainHeader[0], "header--expanded", bool);
				trigger.setAttribute("aria-expanded", bool.toString());
				if (bool) {
					//opening menu -> move focus to first element inside nav
					(nav.querySelectorAll("[href], input:not([disabled]), button:not([disabled])")[0] as HTMLElement).focus();
				} else if (focusMenu) {
					focusMenu.focus();
					focusMenu = false;
				}
			}
		}
	})();
</script>
